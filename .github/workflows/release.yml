# name: Release

# on:
#     push:
#         tags:
#             - "*"

# jobs:
#     release-cli:
#         runs-on: ubuntu-latest
#         permissions:
#             contents: write

#         steps:
#             - name: Checkout repository
#               uses: actions/checkout@v4

#             - name: Cache Cargo registry and build files
#               uses: actions/cache@v4
#               with:
#                   path: |
#                       ~/.cargo/registry
#                       ~/.cargo/git
#                       target
#                   key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

#             - name: Set up Rust toolchain
#               uses: dtolnay/rust-toolchain@stable

#             - name: Install Zig (Latest Version)
#               run: |
#                   ZIG_TARBALL_URL=$(curl -s https://ziglang.org/download/index.json | jq -r '.master["x86_64-linux"].tarball')
#                   ZIG_VERSION=$(basename $ZIG_TARBALL_URL .tar.xz)
#                   wget $ZIG_TARBALL_URL
#                   tar -xf $ZIG_VERSION.tar.xz
#                   mv $ZIG_VERSION /opt/zig
#                   echo "/opt/zig" >> $GITHUB_PATH

#             - name: Add Rust targets for macOS
#               run: |
#                   rustup target add x86_64-apple-darwin aarch64-apple-darwin

#             - name: Run Clippy
#               run: cargo clippy --manifest-path cli/Cargo.toml -- -D warnings

#             - name: Formatter
#               run: cargo fmt --manifest-path cli/Cargo.toml -- --check

#             - name: Run Tests
#               run: cargo test --manifest-path cli/Cargo.toml

#             - name: Build cmdstack CLI for Linux
#               run: cargo build --release --manifest-path cli/Cargo.toml

#             - name: Cross-compile cmdstack CLI for macOS (x86_64)
#               run: cargo build --release --target x86_64-apple-darwin --manifest-path cli/Cargo.toml

#             - name: Cross-compile cmdstack CLI for macOS (aarch64)
#               run: cargo build --release --target aarch64-apple-darwin --manifest-path cli/Cargo.toml

#             - name: Create macOS universal binary
#               run: |
#                   sudo apt install -y llvm
#                   llvm-lipo -create -output target/release/cmdstack-macos-universal \
#                       target/x86_64-apple-darwin/release/cmdstack \
#                       target/aarch64-apple-darwin/release/cmdstack

#             - name: Upload Release Assets
#               uses: ncipollo/release-action@v1
#               with:
#                   artifacts: |
#                       target/release/cmdstack
#                       target/release/cmdstack-macos-universal
#                   tag: ${{ github.ref_name }}
#                   token: ${{ secrets.GITHUB_TOKEN }}
name: Release

on:
    push:
        tags:
            - "*"

jobs:
    release-cli:
        name: Release - ${{ matrix.platform.os_name }}
        if: startsWith( github.ref, 'refs/tags/v' ) || github.ref == 'refs/tags/test-release'
        strategy:
            matrix:
                platform:
                    # - os_name: Linux-x86_64
                    #   os: ubuntu-latest
                    #   target: x86_64-unknown-linux-gnu
                    #   bin: cmdstack
                    #   name: cmdstack-Linux-x86_64.tar.gz
                    #   cross: false
                    #   cargo_command: cargo

                    - os_name: macOS-x86_64
                      os: ubuntu-latest
                      target: x86_64-apple-darwin
                      bin: cmdstack
                      name: cmdstack-Darwin-x86_64.tar.gz
                      cross: true
                      cargo_command: cross

                    - os_name: macOS-aarch64
                      os: ubuntu-latest
                      target: aarch64-apple-darwin
                      bin: cmdstack
                      name: cmdstack-Darwin-aarch64.tar.gz
                      cross: true
                      cargo_command: cross

        runs-on: ${{ matrix.platform.os }}
        steps:
            - name: Checkout repository
              uses: actions/checkout@v4

            - name: Install Rust toolchain if not cross-compiling
              uses: dtolnay/rust-toolchain@stable
              with:
                  targets: ${{ matrix.platform.target }}
              if: ${{ !matrix.platform.cross }}

            - name: Install Cross for cross-compilation
              run: cargo install cross
              if: matrix.platform.cross

            - name: Build binary
              run: ${{ matrix.platform.cargo_command }} build --release --target ${{ matrix.platform.target }}

            - name: Create Universal Binary (macOS only)
              run: |
                  lipo -create -output target/release/cmdstack-universal \
                      target/x86_64-apple-darwin/release/cmdstack \
                      target/aarch64-apple-darwin/release/cmdstack
              if: matrix.platform.target == 'x86_64-apple-darwin'

            - name: Package as archive
              shell: bash
              run: |
                  cd target/${{ matrix.platform.target }}/release
                  tar czvf ../../../${{ matrix.platform.name }} ${{ matrix.platform.bin }}
                  cd -

            # - name: Publish release artifacts
            #   uses: actions/upload-artifact@v3
            #   with:
            #       name: cmdstack-${{ matrix.platform.os_name }}
            #       path: "cmdstack*"
            #   if: github.ref == 'refs/tags/test-release'

            # - name: Publish GitHub release
            #   uses: softprops/action-gh-release@v1
            #   with:
            #       draft: true
            #       files: "cmdstack*"
            #       body_path: Changes.md
            #   if: startsWith( github.ref, 'refs/tags/v' )
            - name: Upload Release Assets
              uses: ncipollo/release-action@v1
              with:
                  artifacts: |
                      target/release/cmdstack*
                  tag: ${{ github.ref_name }}
                  token: ${{ secrets.GITHUB_TOKEN }}
